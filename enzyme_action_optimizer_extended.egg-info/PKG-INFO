Metadata-Version: 2.4
Name: enzyme-action-optimizer-extended
Version: 0.1.0
Summary: EAO - Enzyme Action Optimizer and comparison suite
Author: BASTIAN STEFANO CUELLAR SALINAS, CAMILA ROXANA MUÑOZ CUYUL, MILENKA ORIANA ZUVIC PINOCHET
Requires-Python: >=3.8
Description-Content-Type: text/markdown

# Enzyme Action Optimizer — Enzyme-Action-Optimizer-Extended

![CI](https://github.com/bastian-cuellar-s/Enzyme-Action-Optimizer-Extended/actions/workflows/ci.yml/badge.svg)
![Coverage](https://codecov.io/gh/bastian-cuellar-s/Enzyme-Action-Optimizer-Extended/branch/main/graph/badge.svg)


Este repositorio contiene una implementación en Python del marco "Enzyme Action Optimizer" (EAO) y varias metaheurísticas y utilidades relacionadas para comparar su desempeño sobre un conjunto de funciones de referencia (CEC2022). El objetivo es ofrecer un proyecto modular, fácil de ejecutar y de extender.

## Resumen del algoritmo

Enzyme Action Optimizer (EAO) es un algoritmo metaheurístico bio-inspirado que modela comportamientos adaptativos semejantes a la acción de enzimas sobre sustratos. En esta implementación EAO se incluye como una variante especial que se ejecuta en un solo run y devuelve una curva de convergencia (historia del mejor valor por iteración). Además el repositorio contiene otras metaheurísticas clásicas (PSO, GWO, MVO, DE, etc.) para comparación.

Puntos clave:
- EAO se ejecuta como un proceso independiente (no itera de forma 'step-by-step' en la interfaz principal) y por eso en el runner hay un adaptador que convierte su salida a una curva de convergencia.
- PSO y algunos métodos requieren estado (velocidades, pbest), el runner ya incluye casos especiales para mantener ese estado entre iteraciones.

## Requisitos

- Python 3.8+
 
Makefile targets
---------------

You can use the provided `Makefile` for common tasks (on Unix):

```bash
make setup   # create venv
make install # install runtime deps
make test    # run pytest if tests exist
make lint    # run flake8
make format  # run black
```

CI note
-------

The GitHub Actions workflow runs `flake8` and `black --check` but currently treats their results as warnings (they do not fail the CI job). This keeps the pipeline permissive while still reporting style issues. If you later want strict enforcement, we can change the workflow to fail on style errors.
# Enzyme Action Optimizer — Enzyme-Action-Optimizer-Extended

Authors / Autores:

- BASTIAN STEFANO CUELLAR SALINAS
- CAMILA ROXANA MUÑOZ CUYUL
- MILENKA ORIANA ZUVIC PINOCHET

---

English (EN)
==============

This repository contains a Python implementation of the Enzyme Action Optimizer (EAO) framework and several metaheuristics and utilities to compare their performance on benchmark functions (CEC2022). The aim is to provide a modular, easy-to-run, and extensible project.

Algorithm summary
-----------------

Enzyme Action Optimizer (EAO) is a bio-inspired metaheuristic algorithm that models adaptive behaviors similar to enzyme actions on substrates. In this implementation, EAO is included as a special variant that runs as a single process and returns a convergence curve (best value per iteration). The repository also includes classical metaheuristics (PSO, GWO, MVO, DE, etc.) for comparison.

Key points:

- EAO runs as a single experiment (not step-by-step), so the runner adapts the output into a per-iteration convergence curve.
- PSO and some algorithms require persistent state (velocities, personal bests); the main runner handles these cases specially.

Requirements
------------

- Python 3.8+
- Install dependencies using the bundled requirements file:

```powershell
pip install -r requirements.txt
```

Repository layout (short)
------------------------

- `main.py` — main script to run experiments (interactive CLI).
- `metaheuristics/` — modular algorithm implementations (PSO, GWO, MVO, DE, EAO, ...).
- `utils/` — core utilities (`get_f.py`, `metrics.py`, `plots.py`, `helpers.py`, `eao_variants.py`).
- `results/` — output folder created by `main.py` for data and plots.
- `tools/` — optional migration and quick-test scripts (can be removed if not needed).

Quick usage
-----------

Run the main script and follow the menu:

```powershell
python main.py
```

You will be asked for:

- Number of enzymes (population size)
- Maximum number of iterations
- Benchmark function (e.g. `F1`, `F2`, ...)
- Variant to run (algorithm name or `all`)

Outputs
-------

- `results/data/` — CSVs with convergence history per run.
- `results/plots/` — PNGs with convergence curves and comparative boxplots.
- `results/summary_metrics.txt` — summary with mean/std/best/worst per variant.

Notes and known issues
----------------------

- Population-size requirements: some algorithms (e.g., DE) assume a minimum population when sampling without replacement. Avoid very small population sizes during quick tests (e.g., < 4). If you see the error "Cannot take a larger sample than population when 'replace=False'", increase the number of agents.
- The `utils` package exposes English module names only (`metrics`, `plots`, `helpers`, `get_f`, `eao_variants`).

Tools
-----

- `tools/migrate_results.py` — migrate an old Spanish `resultados/` folder to the new English `results/` layout (rename files, headers, and subfolders).
- `tools/run_quick.py` — run `main.main()` with canned inputs for quick testing.
- `tools/temp_smoke.py` — small smoke-test runner.

If you don't need these helpers, it's safe to remove the `tools/` folder.

Release / Packaging helpers
---------------------------

There are three helper scripts to build distributable artifacts (sdist + wheel):

- PowerShell (Windows): `scripts/build_release.ps1`
- Bash (Linux/macOS): `scripts/build_release.sh`
- Cross-platform Python: `scripts/build_release.py` (recommended if you want a single command)

Usage examples:

PowerShell (Windows):
```powershell
& 'scripts\build_release.ps1'
```

Linux / macOS:
```bash
chmod +x scripts/build_release.sh
./scripts/build_release.sh
```

Cross-platform (any OS with Python):
```bash
python scripts/build_release.py
```

All scripts will produce the distributions inside `dist/` and will also create
`dist/release_artifacts.zip` when `zip` is available. The zip can be uploaded to a
GitHub Release or used for manual distribution.

CI note: the repository includes a GitHub Actions workflow `.github/workflows/release.yml`
that triggers on Release creation. I also expanded the workflow to support manual
dispatch and tag pushes so builds can be triggered either via the web UI or by
pushing a tag (see `.github/workflows/release.yml`).

Environment setup (recommended)
-------------------------------

There is a PowerShell helper to create a virtual environment and install pinned dependencies:

```powershell
.\setup_env.ps1
```

This script creates a `venv/`, activates it (if run interactively), upgrades pip and installs:
- `requirements.txt` (runtime dependencies pinned)
- `requirements-dev.txt` (pytest, black, flake8)


Contributing / Adding a new variant
----------------------------------

1. Add a new file under `metaheuristics/` implementing the variant.
2. Ensure the exported function matches the signature expected by `utils/eao_variants.get_variant_func()` (check that file). Iterative algorithms should provide a per-iteration callable or be adapted accordingly.
3. Register the variant in `utils/eao_variants.py` so it appears in the `main.py` menu.

Quick examples
--------------

Run one function with all variants (interactive):

```powershell
python main.py
# example responses: 10 (population), 50 (iter), F1, all
```

Run the quick, non-interactive test (if `tools/run_quick.py` is present):

```powershell
python .\tools\run_quick.py
```

License & contact
-----------------

This is an experimental/personal project. If you want me to prepare the repository for publication (pinned requirements, CI, packaging), tell me and I'll prepare it.

---

Español (ES)
============

Este repositorio contiene una implementación en Python del marco "Enzyme Action Optimizer" (EAO) y varias metaheurísticas y utilidades para comparar su desempeño en funciones de referencia (CEC2022). La meta es ofrecer un proyecto modular, fácil de ejecutar y de extender.

Resumen del algoritmo
---------------------

Enzyme Action Optimizer (EAO) es un algoritmo metaheurístico bio-inspirado que modela comportamientos adaptativos semejantes a la acción de enzimas sobre sustratos. En esta implementación, EAO se incluye como una variante especial que se ejecuta en un único run y devuelve una curva de convergencia (mejor valor por iteración). El repositorio también incluye metaheurísticas clásicas (PSO, GWO, MVO, DE, etc.) para comparación.

Puntos clave:

- EAO se ejecuta como un experimento completo (no paso-a-paso), por lo que el runner adapta su salida a una curva de convergencia por iteración.
- PSO y algunos métodos requieren estado persistente (velocidades, pbest); el runner principal maneja estos casos de forma especial.

Requisitos
----------

- Python 3.8+
- Dependencias (instalar con el fichero requirements.txt):

```powershell
pip install -r requirements.txt
```

Estructura del repositorio (resumen)
-----------------------------------

- `main.py` — script principal para ejecutar experimentos (CLI interactivo).
- `metaheuristics/` — implementaciones modulares de algoritmos.
- `utils/` — utilidades centrales (`get_f.py`, `metrics.py`, `plots.py`, `helpers.py`, `eao_variants.py`).
- `results/` — carpeta de salida creada por `main.py`.
- `tools/` — scripts opcionales para migración y pruebas rápidas.

Uso (básico)
------------

Ejecuta el script principal y responde el menú:

```powershell
python main.py
```

Entradas solicitadas:

- Número de enzimas (tamaño de población)
- Número máximo de iteraciones
- Función de benchmark (ej.: `F1`, `F2`, ...)
- Variante a ejecutar (nombre del algoritmo o `all`)

Salidas
------

- `results/data/` — CSVs con historia de convergencia por ejecución.
- `results/plots/` — PNGs con curvas y boxplots comparativos.
- `results/summary_metrics.txt` — resumen con media/std/mejor/peor por variante.

Notas y problemas conocidos
--------------------------

- Requisitos de tamaño de población: algunos algoritmos (p. ej. DE) asumen una población mínima al muestrear sin reemplazo. Evita tamaños muy pequeños en pruebas rápidas (p. ej. < 4). Si ves el error "Cannot take a larger sample than population when 'replace=False'", aumenta el número de agentes.
- El paquete `utils` expone módulos en inglés (`metrics`, `plots`, `helpers`, `get_f`, `eao_variants`).

Herramientas
-----------

- `tools/migrate_results.py` — migrar una carpeta antigua `resultados/` a `results/`.
- `tools/run_quick.py` — ejecutar `main.main()` con entradas predefinidas.
- `tools/temp_smoke.py` — runner de smoke tests.

Contribuir / Añadir variantes
----------------------------

1. Crea un archivo nuevo en `metaheuristics/` con la variante.
2. Asegura que la función exportada tenga la firma esperada por `utils/eao_variants.get_variant_func()`.
3. Registra la variante en `utils/eao_variants.py`.

Ejemplos rápidos
---------------

Ejecutar una función con todas las variantes (interactivo):

```powershell
python main.py
# respuestas ejemplo: 10 (población), 50 (iter), F1, all
```

Ejecutar prueba rápida no interactiva:

```powershell
python .\tools\run_quick.py
```

Licencia y contacto
-------------------

Proyecto experimental/personal. Si quieres que lo prepare para publicación (requirements pinneados, CI, packaging), dímelo y lo preparo.

---
